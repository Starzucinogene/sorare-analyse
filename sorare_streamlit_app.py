import streamlit as st
import pandas as pd
import os
import subprocess

# --- CONFIGURATION ---
CSV_PATH = "sorare_cards.csv"

# --- INTERFACE ---
st.set_page_config(page_title="Analyse Sorare", layout="wide")
st.title("üìä Analyse des cartes Sorare")

# --- BOUTON DE LANCEMENT ---
if st.button("üöÄ Lancer l'analyse en direct"):
    with st.spinner("Analyse en cours... cela peut prendre 1 √† 2 minutes..."):
        if result.returncode == 0:
            st.success("Analyse termin√©e avec succ√®s.")
        else:
            st.error("Erreur pendant l'analyse :")
            st.code(result.stderr)

# --- CHARGEMENT DES DONN√âES ---
if not os.path.exists(CSV_PATH):
    st.warning("Aucune donn√©e CSV d√©tect√©e. Lance d'abord une analyse.")
else:
    df = pd.read_csv(CSV_PATH)

    # Filtres
    st.sidebar.header("Filtres")
    markets = st.sidebar.multiselect("March√©", options=df["March√©"].unique(), default=df["March√©"].unique())
    positions = st.sidebar.multiselect("Poste", options=df["Poste"].unique(), default=df["Poste"].unique())
    rarities = st.sidebar.multiselect("Raret√©", options=df["Raret√©"].unique(), default=df["Raret√©"].unique())
    max_price = st.sidebar.slider("Prix max ETH", 0.0, float(df["Prix API (ETH)"].max()), float(df["Prix API (ETH)"].max()))

    # Application des filtres
    df_filtered = df[
        (df["March√©"].isin(markets)) &
        (df["Poste"].isin(positions)) &
        (df["Raret√©"].isin(rarities)) &
        (df["Prix API (ETH)"] <= max_price)
    ]

    st.markdown(f"**{len(df_filtered)} cartes trouv√©es** sur {len(df)} totales")
    st.dataframe(df_filtered, use_container_width=True)

    if st.button("üì• T√©l√©charger CSV filtr√©"):
        st.download_button("T√©l√©charger", data=df_filtered.to_csv(index=False), file_name="sorare_filtre.csv")